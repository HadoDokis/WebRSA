<?php
    /**
    * FIXME: si dans ActionscandidatsPersonnesController on a
    *   var $uses = array(  'Option', 'ActioncandidatPersonne', ... );
    *   alors, $this->controller->modelClass vaudra Option !!!
    */

    class DefaultComponent extends Component
    {
        //called before Controller::beforeFilter()
        function initialize( &$controller, $settings = array() ) {
            // saving the controller reference for later use
            $this->controller =& $controller;
            // FIXME: settings, ...
        }

        //called after Controller::beforeFilter()
//      public function startup( &$controller ) {
//          switch( $controller->action ) {
//              case 'add':
//              case 'edit':
//                  $model = $this->controller->{$this->controller->modelClass};
//                  // TODO: plus générique -> tous les modèles liés
//                  $linkedModels = Set::merge( $model->hasOne, $model->belongsTo, $model->hasMany, $model->hasAndBelongsToMany );
//                  foreach( array_keys( $linkedModels ) as $linkedModelName ) {
//                      $varName = strtolower( Inflector::pluralize( $linkedModelName ) );
//                      $controller->set( $varName, $model->{$linkedModelName}->find( 'list') );
//                  }
//                  break;
//          }
//      }

        /// FIXME
        //called after Controller::beforeRender()
        function beforeRender(&$controller) {
            if( isset( $this->controller->{$this->controller->modelClass} ) ) {
                $model = $this->controller->{$this->controller->modelClass};
                $domain = Inflector::singularize( Inflector::tableize( $model->name ) );

                switch( $controller->action ) {
                    case 'add':
                    case 'index':
                            $controller->pageTitle = sprintf(
                                __d( $domain, "{$controller->name}::{$controller->action}", true )
                            );
                        break;
                    case 'edit':
                    case 'view': // FIXME: View::get ?
                    case 'delete':
                        $varName = $domain;
                        $controller->pageTitle = sprintf(
                            __d( $domain, "{$controller->name}::{$controller->action}", true ),
                            Set::classicExtract( Set::classicExtract( $controller->viewVars, $varName ), "{$model->name}.{$model->displayField}" )
                        );
                        break;
                }
            }
        }

        /**
        * TODO
        *
        * @access public
        */

        public function index( $queryData = array() ) {
            // FIXME
            $this->controller->paginate = array(
                $this->controller->modelClass => array(
                    'limit' => 5,
                    'recursive' => 0
                )
            );

            $this->controller->paginate = Set::merge( $this->controller->paginate, $queryData );
            $items = $this->controller->paginate( $this->controller->modelClass );

            $varname = Inflector::tableize( $this->controller->name );
            $this->controller->set( $varname, $items );
//             $this->controller->render( $this->controller->action, null, 'index' );
        }

        /**
        * TODO
        *
        * @access public
        */

        public function view( $id = null ) {
            $item = $this->controller->{$this->controller->modelClass}->findById( $id, null, null, 1 );
            $this->controller->assert( !empty( $item ), 'invalidParameter' );

            $varname = strtolower( Inflector::singularize( $this->controller->name ) );
            $this->controller->set( $varname, $item );
        }

        /**
        * FIXME docs
        *
        * @access public
        */

        public function add() {
            $args = func_get_args();
            call_user_func_array( array( $this, '_add_edit' ), $args );
        }

        /**
        * FIXME docs
        *
        * @access public
        */

        public function edit() {
            $args = func_get_args();
            call_user_func_array( array( $this, '_add_edit' ), $args );
        }

        /**
        * FIXME docs
        *
        * @access private
        */

        public function _add_edit( $id = null ) {
            if( $this->controller->action == 'edit' ) {
                $item = $this->controller->{$this->controller->modelClass}->findById( $id, null, null, 1 );
                $this->controller->assert( !empty( $item ), 'invalidParameter' );

                $varname = strtolower( Inflector::singularize( $this->controller->name ) );
                $this->controller->set( $varname, $item );
            }

            if( !empty( $this->controller->data ) ) {
                $this->controller->{$this->controller->modelClass}->create( $this->controller->data );
                if( $this->controller->{$this->controller->modelClass}->save() ) {
                    $this->controller->Session->setFlash( __( 'Save->success', true ), 'flash/success' );
                    $this->controller->redirect( array( 'action' => 'index' ) );
                }
            }
            else if( $this->controller->action == 'edit' ) {
                $this->controller->data = $item;

                // Assign checkboxes - FIXME
                if( !empty( $this->controller->{$this->controller->modelClass}->hasAndBelongsToMany ) ) {
                    $HABTMModelNames = array_keys( $this->controller->{$this->controller->modelClass}->hasAndBelongsToMany );
                    foreach( $HABTMModelNames as $HABTMModelName )
                        $this->controller->data = Set::insert( $this->controller->data, "{$HABTMModelName}.{$HABTMModelName}", Set::extract( $this->controller->data, "/{$HABTMModelName}/id" ) );
                }
            }

            $this->controller->render( $this->controller->action, null, 'add_edit' );
        }

        /**
        * FIXME docs
        *
        * @access public
        */

        public function delete( $id = null ) {
            $item = $this->controller->{$this->controller->modelClass}->findById( $id, null, null, -1 );
            $this->controller->assert( !empty( $item ), 'invalidParameter' );

            if( $this->controller->{$this->controller->modelClass}->delete( $id ) ) {
                $this->controller->Session->setFlash( __( 'Delete->success', true ), 'flash/success' );
            }
            else {
                $this->controller->Session->setFlash( __( 'Delete->error', true ), 'flash/error' );
            }

            $this->controller->redirect( array( 'action' => 'index' ) );
        }

        /**
        * The beforeRedirect method is invoked when the controller's redirect method
        * is called but before any further action. If this method returns false the
        * controller will not continue on to redirect the request.
        * The $url, $status and $exit variables have same meaning as for the controller's method.
        */
        function beforeRedirect( &$controller, $url, $status = null, $exit = true ) {
            parent::beforeRedirect( $controller, $url, $status , $exit );
        }
    }
?>