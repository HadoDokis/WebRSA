<?php
	/**
	 * Nouvelle façon de paramétrer la génération de documents PDF via Gedooo.
	 *
	 * Ci-dessous, l'ensemble des clés de configuration possibles.
	 *
	 * array(
	 *	'method' => 'classic', // classic, unoconv, cloudooo
	 *	// Ancien serveur Gedooo
	 *	// 'wsdl' => 'http://gedooo.test.adullact.org:8080/axis2/services/OfficeService?wsdl',
	 *	// Nouveau serveur Gedooo
	 *	'wsdl' => 'http://gedooo.test.adullact.org:8880/ODFgedooo/OfficeService?wsdl',
	 *	// Pour Unoconv
	 *	'unoconv_bin' => '/home/cbuffin/Bureau/1/usr/bin/unoconv',
	 *	// Pour Cloudooo
	 *	'cloudooo_host' => '192.168.2.35',
	 *	'cloudooo_port' => '8011'
	 * )
	 */

	// Exemple de configuration avec l'ancien Gedooo
	/*Configure::write(
		'Gedooo',
		array(
			'method' => 'classic',
			'wsdl' => 'http://gedooo.test.adullact.org:8080/axis2/services/OfficeService?wsdl',
		)
	);*/

	// Exemple de configuration avec le nouveau Gedooo et unoconv
	/*Configure::write(
		'Gedooo',
		array(
			'method' => 'unoconv',
			'wsdl' => 'http://gedooo.test.adullact.org:8880/ODFgedooo/OfficeService?wsdl',
			'unoconv_bin' => '/home/cbuffin/Bureau/1/usr/bin/unoconv',
		)
	);*/

	// Exemple de configuration avec le nouveau Gedooo et cloudooo
	Configure::write(
		'Gedooo',
		array(
			'method' => 'cloudooo',
			'wsdl' => 'http://gedooo.test.adullact.org:8880/ODFgedooo/OfficeService?wsdl',
			'cloudooo_host' => '192.168.2.35',
			'cloudooo_port' => '8011'
		)
	);

	/**
	 * Le chemin complet vers la base de l'application (utilisé par certains shells)
	 *
	 * @default: null
	 */
	Configure::write( 'FULL_BASE_URL', 'http://localhost/webrsa/trunk' );

	Configure::write( 'Cg.departement', 66 );
	Configure::write( 'Utilisateurs.multilogin', false );
	Configure::write( 'with_parentid', true ); // true = cg66
	Configure::write( 'nom_form_ci_cg', 'cg66' );
	Configure::write( 'CG.cantons', true ); // false = cg93, true = cg66
	Configure::write( 'Zonesegeographiques.CodesInsee', false );
	//Configure::write( 'Etatliquidatif.limit', 1000 ); // INFO: commenter pour ne pas avoir de limite

	/**
	 * Champs spécifique selon le CG pour le formulaire de l'APRE
	 * @default: 'cg93' (pour le CG93), 'cg66' (pour le CG66)
	 */
	Configure::write( 'nom_form_apre_cg', 'cg66' );

	// Limit pour le nombre de documents à éditer dans la cohorte par orientation
	Configure::write( 'nb_limit_print', 2000 );


	/**
	 * Permet à l'administrateur d'accéder à toutes les parties de l'application
	 * normalement bloquées aux seules parties de paramétrage renseignées.
	 * Voir AppController::_isAdminAction().
	 * @default false
	 */
	Configure::write( 'Admin.unlockall', false );

	/**
	 * Montant maximal des apres complémentaires pour une personne au cours
	 * de la période de temps définie par Apre.periodeMontantMaxComplementaires.
	 * @default 2600
	 * cg66 -> 3000
	 */
	Configure::write( 'Apre.montantMaxComplementaires', 3000 );

	/**
	 * Période (en nombre d'année) utilisée pour la calcul du montant maximal
	 * des apres complémentaires pour une personne.
	 * @default 1 (une année du 01/01 au 31/12)
	 */
	Configure::write( 'Apre.periodeMontantMaxComplementaires', 1 );

	/**
	 * Paramètre à renseigner pour l'utilisation du bon MVC
	 * @default: vide (pour le CG93), sinon '66' pour le CG66
	 */
	Configure::write( 'Apre.suffixe', '66' );

	/**
	 * Paramètres à renseigner pour les APRE's forfaitaires
	 * FIXME: doc
	 */
	Configure::write( 'Apre.forfaitaire.montantbase', 400 );
	Configure::write( 'Apre.forfaitaire.montantenfant12', 100 );
	Configure::write( 'Apre.forfaitaire.nbenfant12max', 4 );

	/**
	 * FIXME: vérifier l'existance et les droits
	 * FIXME: accès concurrents ?
	 */
	Configure::write( 'Cohorte.dossierTmpPdfs', APP.'tmp/files/pdf' );

	/**
	 *   Paramètres à renseigner pour les montants des
	 *   forfaits de déplacements des APREs pour le CG66
	 *   @default:   0.20€ pour les forfaits au Km
	 *               23€ pour les frais d'hebergement
	 *               3.81€ pour les frais de repas
	 */
	Configure::write( 'Fraisdeplacement66.forfaitvehicule', 0.20 );
	Configure::write( 'Fraisdeplacement66.forfaithebergt', 23 );
	Configure::write( 'Fraisdeplacement66.forfaitrepas', 3.81 );

	/**
	 * Permet à l'administrateur d'ajouter une adresse pour l'utilisateur
	 * connecté à l'application.
	 * Besoin pour le CG66 lors de l'impression des courriers de rendez-vous
	 * @default false
	 */
	Configure::write( 'User.adresse', true ); // true = cg66, false = cg93


	/**
	 * Paramètre à renseigner pour l'affichage de la bonne fiche de candidature
	 * @default: 'cg93' (pour le CG93), sinon 'cg66' pour le CG66
	 */
	Configure::write( 'ActioncandidatPersonne.suffixe', 'cg66' );

	/**
	 *   Paramètre à renseigner dans le cas d'un affichage plus large du menu du dossier
	 *   @default: false
	 */
	Configure::write( 'UI.menu.large', true );


	/**
	 *   Paramètre à renseigner pour le CG58 pour le lien pointant sur leur application
	 */
	Configure::write( 'UI.menu.lienDemandeur', false );


	/**
	 *   Paramètre à renseigner pour déterminer la plage horaire que l'on dispose pour pouvoir accéder
	 *   aux différents boutons possédant ce paramètre.
	 *   On met 48, pour 48H car la plage de date va de minuit à minuit et donc un formulaire saisi
	 *   un jour à 18h ne serait plus modifiable/validable/supprimable le lendemain.
	 *   @default: 48 --> nombre d'heures pendant lesquelles on pourra accéder au bouton
	 */
	Configure::write( 'Periode.modifiable.nbheure', 48 );
	Configure::write( 'Periode.modifiablecer.nbheure', 240 );
	Configure::write( 'Periode.modifiableorientation.nbheure', 240 );


	/**
	 * Champs spécifique selon le CG pour le formulaire des PDOs
	 * @default: 'cg93' (pour le CG93), 'cg66' (pour le CG66)
	 */
	Configure::write( 'nom_form_pdo_cg', 'cg66' );

	/**
	 * Champs spécifique selon le CG pour le formulaire du bilan de parcours / Fiche de saisine
	 * @default: 'cg93' (pour le CG93), 'cg66' (pour le CG66)
	 */
	Configure::write( 'nom_form_bilan_cg', 'cg66' );

	/**
	 * Champs spécifique selon le CG pour le formulaire du Contrat Unqiue d'Insertion
	 * @default: 'cg93' (pour le CG93), 'cg66' (pour le CG66)
	 */
	Configure::write( 'nom_form_cui_cg', 'cg66' );

	/**
	 *   Paramètre pour connaître le pourcentage du 1er versement, lors d'un versement en 2 fois,
	 *   pour les apres présentes dans un état liquidatif
	 *   @default: 60 ---> avant 40 %
	 */
	Configure::write( 'Apre.pourcentage.montantversement', 60 );

	/**
	 * Permet de désactiver l'utilisation des jetons sur les dossiers
	 * Si à false, on utilise les jetons sur les dossiers.
	 * Si à true, on n'utilise pas les jetons sur les dossiers.
	 * @default false
	 */
	Configure::write( 'Jetons2.disabled', false );

	/**
	 *   Paramètre pour définir les taux dans le formulaire du CUI :
	 *   Cui.taux.fixe                   => Taux fixé par l'arrêté du Préfet de région (en % )
	 *   Cui.taux.prisencharge           => Taux de prise en charge effectif si le Conseil Général fixe
	 *                                       un taux supérieur au taux fixé par le Préfet de région (en %)
	 *   Cui.taux.financementexclusif    => Financement exclusif du Conseil Général, Si oui, taux (en %)
	 *   @default: à définir par chaque CG
	 */
	Configure::write( 'Cui.taux.fixe', 60 );
	Configure::write( 'Cui.taux.prisencharge', 70 );
	Configure::write( 'Cui.taux.financementexclusif', 60 );

	/**
	 * Permet la pagination progressive, cad. qu'on ne compte pas le nombre
	 * d'enregistrements totaux, mais que l'on regarde seulement si la
	 * page suivante existe.
	 *
	 * Ce paramètre concerne toutes les paginations.
	 *
	 * @default: false (pagination normale)
	 */
	Configure::write( 'Optimisations.progressivePaginate', true );

	/**
	 * Variables permettant le déclenchement de passage en EPD d'un dossier via les PDOs
	 */
	// Valeur de l'id technique de la table traitementstypespdos dont le libellé représente "En cours"
	Configure::write( 'traitementEnCoursId', 1 );

	// Valeur de l'id technique de la table traitementstypespdos dont le libellé représente "Traité"
	Configure::write( 'traitementClosId', 2 );

	/**
	 * Variables apparaissant dans la fiche de calcul du journal de traitement d'une PDO
	 */
	Configure::write( 'Traitementpcg66.fichecalcul_coefannee1', 34 );
	Configure::write( 'Traitementpcg66.fichecalcul_coefannee2', 25 );

	Configure::write( 'Traitementpcg66.fichecalcul_cavntmax', 80300 );
	Configure::write( 'Traitementpcg66.fichecalcul_casrvmax', 32100 );

	Configure::write( 'Traitementpcg66.fichecalcul_abattbicvnt', 71 );
	Configure::write( 'Traitementpcg66.fichecalcul_abattbicsrv', 50 );
	Configure::write( 'Traitementpcg66.fichecalcul_abattbncsrv', 34 );

	/**
	 * Affiche ou non l'alerte de fin de session et exécute la redirection
	 */
	Configure::write( 'alerteFinSession', true );

	/**
	 * Durée du délai (en jours) accordé pour la création d'un nouveau contrat pour
	 * le thème "non orientation professionelle"
	 */
	Configure::write( 'Nonorientationproep66.delaiCreationContrat', 60 );


	/**
	 * Configuration pour le dialogue avec un CMS (système de gestion de contenu)
	 * comme Alfresco, servant à stocker les PDF
	 */
	Configure::write(
			'Cmis', array(
		'url' => 'http://xxxxxx/alfresco/service/api/cmis',
		'username' => 'user',
		'password' => 'pass',
		'prefix' => '/Sites/Webrsa',
			)
	);

	/**
	 * Permet de rajouter des conditions aux conditions de recherches suivant
	 * le paramétrage des service référent dont dépend l'utilisateur connecté.
	 *
	 * @default false
	 */
	Configure::write( 'Recherche.qdFilters.Serviceinstructeur', ( Configure::read( 'Cg.departement' ) == 58 ) );


	/**
	 *  Permet de définir si on peut ou non ajouter une nouvelle orientation à un dossier
	 *   - toppersdrodevorsa     --> par défaut 1 (personne soumise à droit et devoir)
	 *   - situationetatdosrsa   --> par défaut array( 'Z', 2, 3, 4) (dossier dans un droit ouvert et versable)
	 *
	 * INFO: depuis le passage en CakePHP 2.x, il faut mettre les valeurs numériques entre apostrophes.
	 */
	Configure::write( 'AjoutOrientationPossible.toppersdrodevorsa', array( null, '0', '1' ) ); // aucune distincton sur le soumis à droit et devoir
	Configure::write( 'AjoutOrientationPossible.situationetatdosrsa', array( 'Z', '0', '1', '2', '3', '4', '5', '6' ) );// on prend toutes les valeurs possibles de l'état du dossier RSA

	/**
	 * Permet de spécifier si les recherches sur l'identifiant Pôle Emploi d'un
	 * allocataire doivent se faire sur les 8 derniers chiffres de l'identifiant
	 * (true) ou sur la totalité de celui-ci (false).
	 *
	 * @default false
	 */
	Configure::write( 'Recherche.identifiantpecourt', true );

	/**
	 * Spécifie l'intervalle, par-rapport à la date de fin d'un CER, en deçà duquel
	 * un CER sera positionné « En cours:Bilan à réaliser » grâce au shell
	 * positioncer66.
	 *
	 * Voir le document app/docs/Documentation administrateurs.odt, partie
	 * "Intervalles PostgreSQL"
	 */
	Configure::write( 'Contratinsertion.Cg66.updateEncoursbilan', '2 month' );

	/**
	 * Variable contenant un array avec les id des typesorients du grand social et de l'emploi
	 */
	Configure::write( 'Orientstruct.typeorientprincipale', array( 'SOCIAL' => array( 4, 6 ), 'Emploi' => array( 1 ) ) );

	/**
	 * Durée du délai (intervalle) entre la date de validation de l'orientation et la date
	 * d'inscription au Pôle Emploi
	 *
	 * Voir le document app/docs/Documentation administrateurs.odt, partie
	 * "Intervalles PostgreSQL"
	 */
	Configure::write( 'Selectionnoninscritspe.intervalleDetection', '2 months' );

	/**
	 * Gestion des anomalies
	 */
	Configure::write( 'Optimisations.Gestionsanomaliesbdds.progressivePaginate', false );
	Configure::write( 'Situationdossierrsa.etatdosrsa.ouvert', array( 'Z', '2', '3', '4' ) );

	/**
	 * 	Délai pour la détection des CERs arrivant à échéance
	 */
	Configure::write( 'Criterecer.delaiavanteecheance', '1 months' );


	/**
	 * 	Pour le CG66: Délai durant lequel les dossiers d'EP ne seront ni détectables, ni sélectionnables dans la corbeille
	 * 	des dossiers devant passer en EP
	 * 	@default: null
	 * 	@CG66: 1 month 15 days
	 * 	Voir le document app/docs/Documentation administrateurs.odt, partie
	 * 	"Intervalles PostgreSQL"
	 */
	Configure::write( 'Dossierep.delaiavantselection', null );

	/**
	 * 	Valeurs prises par le champ natpf pour déterminer si le dossier est en RSA Socle
	 */
	Configure::write( 'Detailcalculdroitrsa.natpf.socle', array( 'RSD', 'RSI', 'RSU', 'RSJ' ) );

	/**
	 * 	Mise en paramétrage de la liste des chargés d'insertion et secrétaire liés à une fiche de candidature
	 * 	@default: id des group auxquels les personnes sont liées
	 * 	Mise en place suite à la demande d'améliorations du 28/02/2012 ( #5630 )
	 */
	Configure::write( 'Chargeinsertion.Secretaire.group_id', array( 16, 7, 12 ) );

	/**
	 * Configuration du composant Email de CakePHP pour l'envoi de mails.
	 * Ne pas oublier de configurer le fichier php.ini
	 *
	 * @see http://book.cakephp.org/1.2/en/view/481/Sending-A-Message-Using-SMTP
	 */
	Configure::write(
		'Email',
		array(
			'smtpOptions' => array(
				'port'=>'25',
				'timeout'=>'30',
				'host' => 'xxxxx.cgxxxx.fr',
				'username'=>'',
				'password'=>'',
				'client' => 'smtp_helo_hostname'
			)
		)
	);

	/**
	 * Configuration des adresses mails d'expéditeur pour l'envoi de mails concernant
	 * les pièces manquantes de l'APRE (CG 66).
	 */
	Configure::write( 'Apre66.EmailPiecesmanquantes.from', 'emailaprefrom@cgxxxx.fr' );
	Configure::write( 'Apre66.EmailPiecesmanquantes.replyto', Configure::read( 'Apre66.EmailPiecesmanquantes.from' ) );


	/**
	 * 	Délai pour la détection des CERs non validés et notifiés il y a 1 mois et demi
	 */
	Configure::write( 'Criterecer.delaidetectionnonvalidnotifie', '45 days' );


	/**
	 * Variable contenant un array avec les id des 3 seuls typesorients nécessaires aux non orientés
	 */
	Configure::write( 'Nonoriente66.notisemploi.typeorientId', array( '5', '7', '2' ) );

	/**
	 * Variable contenant un id pour les typesorients Social par défaut
	 * dans la gestion des réponses des non orientés 66
	 */
	Configure::write( 'Nonoriente66.TypeorientIdSocial', 7 );

	/**
	 * Variable contenant un id pour les typesorients Prépro par défaut
	 * dans la gestion des réponses des non orientés 66
	 */
	Configure::write( 'Nonoriente66.TypeorientIdPrepro', 5 );


	/**
	 * Configuration des adresses mails d'expéditeur pour l'envoi de mails concernant
	 * les fiches de candidature (CG 66).
	 */
	Configure::write( 'FicheCandidature.Email.from', 'emailaprefrom@cgxxxx.fr' );
	Configure::write( 'FicheCandidature.Email.replyto', Configure::read( 'FicheCandidature.Email.from' ) );

	/**
	 * Lorsque l'on enregistre un CER au CG 66, on vérifie si l'allocataire a un dernier rendez-vous
	 * de type "01 - Convocation à un Entretien - Contrat" ayant le statut "Prévu".
	 * Si c'est le cas, on le passe à "Venu(e)"
	 */
	Configure::write(
		'Contratinsertion.Cg66.Rendezvous',
		array(
			'conditions' => array(
				// Table typesrdv: "01 - Convocation à un Entretien - Contrat"
				'typerdv_id' => 1,
				// Table statutsrdvs: "Prévu"
				'statutrdv_id' => 17
			),
			// Table statutsrdvs: "Venu(e)"
			'statutrdv_id' => 1
		)
	);

	/**
	 * Permet d'indiquer les valeurs par défaut des formulaires de recherche.
	 * Utilisé pour le fomulaire de recherche par Dossiers PCGs -> Par Gestionnaires PCGs
	 *
	 */
	Configure::write(
		'Filtresdefaut.Criteresdossierspcgs66_gestionnaire',
		array(
			'Dossierpcg66' => array(
				'etatdossierpcg_choice' => true, // Cases à cocher "Filtrer par état du dossier PCG "
				'etatdossierpcg' => array( 'attinstr', 'decisionvalid', 'decisionnonvalid', 'attpj' ) // Case à cocher "Filtrer par état du dossier PCG"
			)
		)
	);

	/**
	 * Permet de rechercher le dernier dossier d'un allocataire dans la table
	 * derniersdossiersallocataires (il faudra mettre le shell Derniersdossiersallocataires
	 * en tâche planifiée) afin de se passer d'une sous-requête coûteuse dans les
	 * recherches.
	 *
	 * @param boolean
	 * @default null
	 */
	Configure::write( 'Optimisations.useTableDernierdossierallocataire', true );
	
	
	/**
	 * Variable contenant un integer (âge de l'allocataire) pour la limite d'âge à atteindre
	 * pour que la tacite reconduction soit autorisée.
	 * Permet également d'autoriser la création d'un CER au-delà de la limite des 24 mois
	 */
	Configure::write( 'Tacitereconduction.limiteAge', 55 );
	
	/**
	 * Variable contenant un integer (id stocké en base) pour la description du traitement PCG
	 * devant être pris en compte pour la corbeille PCG
	 */
	Configure::write( 'Corbeillepcg.descriptionpdoId', array( '1' ) );
?>